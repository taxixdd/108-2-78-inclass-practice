list(dex = as.integer(778),
speciesName = "Mimikyu",
speciesId = "mimikyu",
baseStats = Pikachu[[4]],
types = c("ghost","fairy"),
fastMoves = Jigglypuff[[6]],
chargedMoves = Jigglypuff[[7]],
legacyMoves = Jigglypuff[[8]],
defaultIVs = Jigglypuff[[9]]
)
str(Mimikyu)
# Gamemaster
Mimikyu <-
list(dex = as.integer(778),
speciesName = "Mimikyu",
speciesId = "mimikyu",
baseStats = Pikachu[[4]],
types = c("ghost","fairy"),
fastMoves = Jigglypuff[[6]],
chargedMoves = Jigglypuff[[7]],
legacyMoves = Jigglypuff[[8]],
defaultIVs = Jigglypuff[[9]]
)
Gamemaster[731] <- Mimikyu
# Gamemaster
Mimikyu <-
list(dex = as.integer(778),
speciesName = "Mimikyu",
speciesId = "mimikyu",
baseStats = Pikachu[[4]],
types = c("ghost","fairy"),
fastMoves = Jigglypuff[[6]],
chargedMoves = Jigglypuff[[7]],
legacyMoves = Jigglypuff[[8]],
defaultIVs = Jigglypuff[[9]]
)
Gamemaster[1][731] <- Mimikyu
# Gamemaster
Mimikyu <-
list(dex = as.integer(778),
speciesName = "Mimikyu",
speciesId = "mimikyu",
baseStats = Pikachu[[4]],
types = c("ghost","fairy"),
fastMoves = Jigglypuff[[6]],
chargedMoves = Jigglypuff[[7]],
legacyMoves = Jigglypuff[[8]],
defaultIVs = Jigglypuff[[9]]
)
Gamemaster[[1]][[731]] <- Mimikyu
# Gamemaster
Mimikyu <-
list(dex = as.integer(778),
speciesName = "Mimikyu",
speciesId = "mimikyu",
baseStats = Pikachu[[4]],
types = c("ghost","fairy"),
fastMoves = Jigglypuff[[6]],
chargedMoves = Jigglypuff[[7]],
legacyMoves = Jigglypuff[[8]],
defaultIVs = Jigglypuff[[9]]
)
Gamemaster[[1]][[731]] <- Mimikyu
# Gamemaster
View(Gamemaster)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
names(mostViolatedArticle)
mostViolatedArticle <-max(table_countsByArticle)
mostViolatedArticle <-max(table_countsByArticle)
violatedArticles <- names(table(badEmployers$law))
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
violatedArticles <- names(table(badEmployers$law))
violatedArticles
table_countsByArticle <- table(badEmployers$law)
table_countsByArticle
mostViolatedArticle <-max(table_countsByArticle)
names(mostViolatedArticle)
mostViolatedArticle
mostViolatedArticle <-max(table_countsByArticle)
mostViolatedArticle
mostViolatedArticle_content <- names(table(badEmployers$lawContent))
mostViolatedArticle_content
knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example[c("name","hobby","bloodType")])
example$name[
pick_loveFood & pick_bloodB
]
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
str(example[c("name","hobby","bloodType")])
example$name[
pick_loveFood & pick_bloodB
]
example[c("name","birthday","residence")]
example$name[
pick_after98 | !pick_fromTaipeiMetro
]
library(stringr)
library(glue)
str_sub("410873002", 5, 6)
lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
install.packages("htmlwidgets")
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
strip1 <- strip2 <- strip3 <- "[0-9]"
strip4 <- "號"
myRegexSlotMachine <- paste0(strip1,strip2,strip3,strip4)
print(myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
str_view_all(addresses,"[0-9]+") # 樓號也會選到
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
# 目標是後面的唧唧
target_regex2 <- "唧唧"
pattern <- glue::glue("{target_regex2}$")
print(pattern)
str_view(phrase, pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
# context_picked
str_extract_all(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+")
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄|段兄弟")
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄＆段兄弟")
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄＆段兄弟")
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄｜段兄弟")
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄｜段兄弟")
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄｜段兄弟")
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄｜段兄弟")
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄｜段兄弟")
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄｜段兄弟")
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄|段兄弟")
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄|段兄弟")
# back_regex
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data$dataframe$text[2]
# context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data$dataframe$text[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
View(context_picked)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
View(semiGodsSemiDevils)
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[2]
context_picked
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
str(example[c("name","hobby","bloodType")])
example$name[
pick_loveFood & pick_bloodB
]
str(semiGodsSemiDevils)
#context_picked
str(semiGodsSemiDevils)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
#context_picked
str(semiGodsSemiDevils)
pick_p2 <- semiGodsSemiDevils$data[[1]][2][3]
str(semiGodsSemiDevils)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
#context_picked
str(semiGodsSemiDevils)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- (pick_p2,3)
str(semiGodsSemiDevils)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2[3]
str(semiGodsSemiDevils)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
View(pick_p2)
str(semiGodsSemiDevils)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2[3]
str(semiGodsSemiDevils)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
str_sub(pick_p2,3) >- context_picked
str(semiGodsSemiDevils)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
str_sub(pick_p2,3)
#context_picked
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
str_sub(pick_p2,3)
#context_picked
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
str_extract(pick_p2,3)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
str_extract(pick_p2,3)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
str_extract(pick_p2,3)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
str_extract(pick_p2,3)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
str_extract(pick_p2,3)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
str_extract(pick_p2,3)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
str_extract(pick_p2,3)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2[3]
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2[3]
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2$3
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2$3
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2$3
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2$3
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2$text[3]
#context_picked
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2$text[3]
context_picked
textExample <- c("段1......。　　段2....。")
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2$text[3]
context_picked
str_split(context_picked,textExample) -> context_picked_split
context_picked_split
str_split(context_picked,"  ") -> context_picked_split
context_picked_split
str_split(context_picked,"  ") -> context_picked_split
context_picked_split
str_split(context_picked,"  ") -> context_picked_split
context_picked_split
str_split(context_picked,"  ") -> context_picked_split
context_picked_split
str_split(context_picked,"  ") -> context_picked_split
context_picked_split
str_split(context_picked,"　　") -> context_picked_split
context_picked_split
str_extract_all(context_picked_split,段譽) -> mention_duan
str_extract_all(context_picked_split,段譽) -> mention_duan
str_extract_all(context_picked_split,段譽) -> mention_duan
str_extract_all(context_picked_split,"段譽") -> mention_duan
mention_duan
str_extract_all(context_picked_split,"段譽"|"段兄"|"段兄弟"|"段大哥"|"段相公"|"段君"|"姓段的小子") -> mention_duan
str_extract_all(context_picked_split,c("段譽","段兄","段兄弟","段大哥","段相公","段君","姓段的小子") -> mention_duan
mention_duan
str_extract_all(context_picked_split,c("段譽","段兄","段兄弟","段大哥","段相公","段君","姓段的小子") -> mention_duan
mention_duan
str_extract_all(context_picked_split,c("段譽","段兄","段兄弟","段大哥","段相公","段君","姓段的小子") -> mention_duan
mention_duan
str_extract_all(context_picked_split,c("段譽","段兄","段兄弟","段大哥","段相公","段君","姓段的小子") -> mention_duan
mention_duan
str_extract_all(context_picked_split,c("段譽","段兄","段兄弟","段大哥","段相公","段君","姓段的小子") -> mention_duan
mention_duan
str_extract_all(context_picked_split,c("段譽","段兄","段兄弟","段大哥","段相公","段君","姓段的小子") -> mention_duan
mention_duan
str_extract_all(context_picked_split,c("段譽","段兄","段兄弟","段大哥","段相公","段君","姓段的小子") -> mention_duan
mention_duan
str_extract_all(context_picked_split,c("段譽","段兄","段兄弟","段大哥","段相公","段君","姓段的小子")) -> mention_duan
mention_duan
unlist(mention_duan)
table(mention_duan) -> table_duan
unlist(mention_duan)
table(mention_duan)
mention_duan <- unlist(mention_duan)
table(mention_duan)
# table_duan
mention_duan <- unlist(mention_duan)
table(mention_duan) -> table_duan
table_duan
mention_duan <- unlist(mention_duan)
table(mention_duan) -> table_duan
table_duan
mention_duan <- unlist(mention_duan)
table(mention_duan) -> table_duan
table_duan
mention_duan <- unlist(mention_duan)
table(mention_duan) -> table_duan
table_duan
pattern <- paste0("段(兄|兄弟)",back_regex)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- (?!"弟")
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
back_regex <- "(?!"弟")"
back_regex <- "(?!弟)"
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2$text[3]
context_picked
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2$text[P2]
pick_p2 <- semiGodsSemiDevils$data[[1]][2]
context_picked <- pick_p2$text[3]
context_picked
textExample <- c("段1......。　　段2....。")
str_split(context_picked,"　　") -> context_picked_split
context_picked_split
str_extract_all(context_picked_split,c("段譽","段兄","段兄弟","段大哥","段相公","段君","姓段的小子")) -> mention_duan
mention_duan
